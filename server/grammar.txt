Grammar:

<data_type> 	  := 	"float" | "int" | "bool" | "string"
<value> 			  := 	string | bool | float | int
<comparator> 	  := 	< | <> | <= | > | >= | = | !=
<operator>      :=  + | - | * | / | %
<table_ref> 	  := 	name
<column_ref> 	  := 	[ <table_ref>"." ]name

<values>        :=  <value>{ "," <value> }
<table_refs>    :=  <table_ref>{ "," <table_ref> }
<column_refs>   :=  <column_ref{ "," <column_ref> }

<term> 				  := 	<value> | <column_ref>

<condition>   	:= 	NOT <condition>
                    | <condition> <comparator> <condition>
                    | <condition> AND <condition>
                    | <condition> OR <condition>

<select_exprs>  := <term> [ AS name ]{ "," <select_exprs> }
<order>				  := 	<column_ref> [ ASC | DESC ]
<select> 			  := 	SELECT [ DISTINCT ] ( "*" | <select_exprs> )
                    [ FROM <table_refs> ]
                    [ WHERE <condition> ]
                    [ ORDER BY <order> ]
                    [ LIMIT int ]

<column_defs>   :=  <column_ref> <data_type> 
                    [ NOT NULL ] 
                    [ PRIMARY KEY ]
                    [ UNIQUE ]
                    [ DEFAULT <value> ]
                    { "," <column_defs> }
<create>        :=  CREATE TABLE [ IF NOT EXISTS ] table_ref "(" 
                      <column_defs>
                    ")"

<insert>        :=  INSERT INTO <table_ref>
                    [ "(" <column_refs> ")" ]
                    VALUES "(" <values> ")"

<set_exprs>     :=  <column_ref>"="<expr>{ "," <set_exprs> }
<update>        :=  UPDATE <table_ref>
                    SET <set_exprs>
                    [ WHERE <condition> ]

<delete>        :=  DELETE FROM <table_ref>
                    [ WHERE <condition> ]
                    [ LIMIT int ]

<query>         :=  ( <select> | <create> | <insert> | <update> | <delete> )";"